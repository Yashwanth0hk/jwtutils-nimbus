import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

public class AES256WithKey {

    // Use your own 32-byte (256-bit) key (example in hex/Base64 or raw bytes)
    private static final String SECRET_KEY = "12345678901234567890123456789012"; // 32 chars = 32 bytes
    private static final String INIT_VECTOR = "1234567890123456"; // 16 bytes IV

    private static SecretKey getKey() {
        return new SecretKeySpec(SECRET_KEY.getBytes(), "AES");
    }

    private static IvParameterSpec getIv() {
        return new IvParameterSpec(INIT_VECTOR.getBytes());
    }

    public static String encrypt(String plainText) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, getKey(), getIv());
        byte[] encrypted = cipher.doFinal(plainText.getBytes("UTF-8"));
        return Base64.getEncoder().encodeToString(encrypted);
    }

    public static String decrypt(String cipherText) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(Cipher.DECRYPT_MODE, getKey(), getIv());
        byte[] decoded = Base64.getDecoder().decode(cipherText);
        byte[] decrypted = cipher.doFinal(decoded);
        return new String(decrypted, "UTF-8");
    }

    public static void main(String[] args) throws Exception {
        String message = "My secret text";

        String encrypted = encrypt(message);
        System.out.println("Encrypted: " + encrypted);

        String decrypted = decrypt(encrypted);
        System.out.println("Decrypted: " + decrypted);
    }
}

// Import statements for Nimbus JOSE JWT libraries
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jwt.EncryptedJWT;
import com.nimbusds.jwt.JWTClaimsSet;

// Spring and Java utility imports
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.text.ParseException;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

// Spring component annotation marks this class as a Spring-managed bean
@Component
public class JwtUtils {

    // Injecting custom JwtKeyProvider which supplies RSA public/private key pair
    @Autowired
    private JwtKeyProvider keyProvider;

    // ========================= //
    // üîì STEP 1: Extract claims //
    // ========================= //

    /**
     * Decrypts the encrypted JWT (JWE) and extracts all claims
     * @param token The encrypted JWT token string
     * @return JWTClaimsSet containing all claims from the token
     */
    private JWTClaimsSet extractAllClaims(String token) {
        try {
            // Parse the encrypted token into a structured EncryptedJWT object
            EncryptedJWT encryptedJWT = EncryptedJWT.parse(token);

            // Create an RSA decrypter using the server's private key
            RSADecrypter decrypter = new RSADecrypter(keyProvider.getPrivateKey());

            // Decrypt the token using the private key
            encryptedJWT.decrypt(decrypter);

            // Extract and return all claims from the decrypted JWT
            return encryptedJWT.getJWTClaimsSet();
        } catch (ParseException | JOSEException e) {
            // If parsing or decryption fails, throw a RuntimeException
            throw new RuntimeException("Failed to parse or decrypt JWT token", e);
        }
    }

    // ================================== //
    // üîç STEP 2: Generic claim extractor //
    // ================================== //

    /**
     * Generic method to extract a specific claim from the JWT using a resolver function
     * @param token The JWT token string
     * @param claimsResolver Function to resolve the desired claim from JWTClaimsSet
     * @param <T> Type of the claim to return
     * @return Extracted claim of type T
     */
    public <T> T extractClaim(String token, Function<JWTClaimsSet, T> claimsResolver) {
        // First extract all claims, then apply the resolver to extract a specific one
        final JWTClaimsSet claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    // =========================== //
    // ‚úÖ Extract subject/username //
    // =========================== //

    /**
     * Extracts the 'sub' (subject) field, typically the username/contact
     * @param token The JWT token
     * @return Subject from the token
     */
    public String extractUsername(String token) {
        return extractClaim(token, JWTClaimsSet::getSubject);
    }

    // ============================ //
    // ‚úÖ Extract expiration time   //
    // ============================ //

    /**
     * Extracts the expiration time from the token
     * @param token The JWT token
     * @return Date object representing expiration time
     */
    public Date extractExpiration(String token) {
        return extractClaim(token, JWTClaimsSet::getExpirationTime);
    }

    // =========================== //
    // ‚úÖ Check token expiration   //
    // =========================== //

    /**
     * Checks if the JWT token is expired
     * @param token The JWT token
     * @return true if expired, false otherwise
     */
    private boolean isTokenExpired(String token) {
        // Compare expiration date with current time
        return extractExpiration(token).before(new Date());
    }

    // ============================================== //
    // ‚úÖ Validate token against UserDetails object   //
    // ============================================== //

    /**
     * Validates the token by comparing username and checking expiration
     * @param token The JWT token
     * @param userDetails Spring Security UserDetails object
     * @return true if token is valid, false otherwise
     */
    public boolean isTokenValid(String token, org.springframework.security.core.userdetails.UserDetails userDetails) {
        final String username = extractUsername(token);

        // Token is valid only if username matches and it‚Äôs not expired
        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }

    // =========================================== //
    // ‚úÖ Validate token without user verification //
    // =========================================== //

    /**
     * Simple token validation: checks only for expiration
     * @param token The JWT token
     * @return true if token is not expired, false otherwise
     */
    public boolean isTokenValid(String token) {
        return !isTokenExpired(token);
    }

    // ======================================================= //
    // ‚úÖ Extract subject and privileges into a custom DTO     //
    // ======================================================= //

    /**
     * Extracts username and privileges from token and wraps them in a JwtClaimsDTO object
     * @param token The JWT token
     * @return JwtClaimsDTO containing subject and privileges
     */
    public JwtClaimsDTO extractUserDetails(String token) {
        // Decrypt token and extract claims
        JWTClaimsSet claims = extractAllClaims(token);

        // Extract subject (username or contact info)
        String username = claims.getSubject();

        // Initialize a set to hold privileges
        Set<String> privilege = new HashSet<>();

        // Extract "Privileges" claim
        Object raw = claims.getClaim("Privileges");

        // If the claim is a List (as expected), convert to Set<String>
        if (raw instanceof List<?> rawList) {
            privilege = rawList.stream()
                    .filter(Objects::nonNull)
                    .map(Object::toString)
                    .collect(Collectors.toSet());
        }

        // Return as a custom DTO
        return new JwtClaimsDTO(username, privilege);
    }

    // ========================================= //
    // ‚úÖ Extract only Privileges from the token //
    // ========================================= //

    /**
     * Extracts the "Privileges" claim from the token
     * @param token The JWT token
     * @return Set of privilege strings
     */
    public Set<String> extractPrivileges(String token) {
        JWTClaimsSet claims = extractAllClaims(token);

        Object raw = claims.getClaim("Privileges");

        // If the privileges claim is a List, convert it to Set<String>
        if (raw instanceof List<?> rawList) {
            return rawList.stream()
                    .filter(Objects::nonNull)
                    .map(Object::toString)
                    .collect(Collectors.toSet());
        }

        // Return empty set if claim is missing or invalid
        return Collections.emptySet();
    }
}
